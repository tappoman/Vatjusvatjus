********************************************
***OPTIONS VÄLILEHTI, KUTSUTTAVAT METODIT***
********************************************
Luokka
	Metodi
		Parametrit (type) antotapa
			tiedosto.txt (sijainti)
			
Saving:
aseta parametrit:	asetaParams()
			port: (String) COM1-COM10 (dropdown tms.)
			baud: (float) syöte: 9600 (void mennä dropdown kans, perusnopeudet tähän)
			polku: (String) syöte: "esim C:/Users/blaablaablaa" Tämä on tallennettavan TAL-datan ja MIT-datan polku!!
				USECONTROL.ini (juuri)
			
aseta hwcontrol:	asetaHWcontrol()
			LOGGING: (float) syöte
			PULS_CM: (float) syöte 
			PULS_PK: (float) syöte
				HWCONTROL.ini (juuri)
			
aseta aloitustiedot:	asetaAloitustiedot()
			FO: (String) syöte
			KJ: (String) syöte 
			OM: (String) syöte
			ML: (String) syöte
			ORG: (String syöte
				ALOITUSTIEDOT.ini (juuri)

aseta pistetiedot:	asetaPistetiedot()
			TY: (String) syöte
			PK: (String) syöte
			LA: (String) syöte
				PISTETIEDOT.ini (juuri)

aseta tutkimustiedot:	asetaTutkimustiedot()
			TT: (String) syöte
			TX: (String) syöte
			XY: (String) syöte
			LN: (String) syöte
				TUTKIMUSTIEDOT.ini (juuri)
			
aseta tallennustiedot:	tallennaTAL()
			hanke: (String) haetaan USECONTROL.ini filusta
			polku: (String) haetaan USECONTROL.ini filusta
			TAL: (tallennettava rivi = #TAL)
		
		
eli yllä olevilla metodeilla tallennettaan filuun kun jotain muutetaan asetusikkunassa
Oletuksena haetaan asetukset tiedostosta ja pätkästää ikkunaan ja tarvittaessa sitten kirjoitellaan korjattuna filuun.

Eli lukeminen jotain suuntaan: 

import configparser
self._config = configparser.ConfigParser()
config.read('haluttu.ini')

#kaikki on DEFAULT sektiossa omissa filuissaan
config['DEFAULT']['port'] --> antaa portin filusta jne.